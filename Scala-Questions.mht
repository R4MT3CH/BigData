MIME-Version: 1.0
Content-Location: file:///C:/CF6311E1/Scala.htm
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html; charset="utf-8"

<html xmlns:o=3D"urn:schemas-microsoft-com:office:office"
xmlns:dt=3D"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; charset=3Dutf-8">
<meta name=3DProgId content=3DOneNote.File>
<meta name=3DGenerator content=3D"Microsoft OneNote 15">
<link id=3DMain-File rel=3DMain-File href=3DScala.htm>
<link rel=3DFile-List href=3D"Scala_files/filelist.xml">
</head>

<body lang=3Den-US style=3D'font-family:Calibri;font-size:11.0pt'>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:13.2756in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.2645in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>1. Wha=
t is a
trait ? when to use ?<span style=3D'mso-spacerun:yes'>  </span>example</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D4 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.0423in;margin-le=
ft:
 0in;width:13.2756in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:2.1847in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.3875in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.302in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4006in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:2.1847in;height:.177in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676=
'>Monday,
  July 29, 2024</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676=
'>7:13
  AM</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.3875in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.302in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4006in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.3875in;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.302in;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td rowspan=3D3 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:5.4006in;height:4.6701in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Interview An=
swer</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>A trait in S=
cala
  is a reusable code component that can be mixed into classes, with the abi=
lity
  to contain concrete methods and fields. They are used to share common
  behavior across multiple classes and support multiple inheritance.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>trait Animal=
 {</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def sound(): String<span
  style=3D'mso-spacerun:yes'>  </span>// Abstract method</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def sleep(): String =3D
  &quot;Zzz...&quot;<span style=3D'mso-spacerun:yes'>  </span>// Concrete =
method</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>trait Pet {<=
/p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def name: String</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def greet(): String =3D s&quot;Hello=
, I am
  $name&quot;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>class Dog(val
  name: String) extends Animal with Pet {</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def sound(): String =3D &quot;Woof!&=
quot;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>val myDog =
=3D new
  Dog(&quot;Buddy&quot;)</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(myDo=
g.greet())<span
  style=3D'mso-spacerun:yes'>  </span>// Output: Hello, I am Buddy</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(myDo=
g.sound())<span
  style=3D'mso-spacerun:yes'>  </span>// Output: Woof!</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(myDo=
g.sleep())<span
  style=3D'mso-spacerun:yes'>  </span>// Output: Zzz...</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.184in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:2.1847in;
  height:.184in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.3875in;
  height:.184in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.302in;
  height:.184in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:4.4187in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td colspan=3D2 rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;marg=
in:0in;
  padding:0pt;width:7.5722in;height:9.8916in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>What is a tr=
ait ?
  when to use ?<span style=3D'mso-spacerun:yes'>  </span>Example</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>In Scala, a =
trait
  is a special kind of class that enables the creation of reusable code that
  can be mixed into classes. Traits are similar to Java interfaces but can =
also
  contain concrete methods and fields, which interfaces in Java cannot.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Key Points a=
bout
  Traits:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Reusability:
  Traits promote code reuse and help to avoid code duplication.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Mix-in
  Composition: Traits can be mixed into classes to add functionality.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Multiple Tra=
its: A
  class can mix in multiple traits, providing a way to compose behaviors fr=
om
  various sources.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>When to Use
  Traits:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Common Behav=
ior:
  When you have behavior that can be shared across multiple classes, use a
  trait.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Multiple
  Inheritance: When you need multiple inheritance, traits provide a safe wa=
y to
  achieve it.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Abstract and
  Concrete Methods: When you want to define a combination of abstract and
  concrete methods that can be shared by different classes.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Define a =
trait
  with both abstract and concrete methods</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>trait Animal=
 {</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>// Abstract method</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def sound(): String</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>// Concrete method</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def sleep(): String =3D &quot;Zzz...=
&quot;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Define an=
other
  trait</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>trait Pet {<=
/p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def name: String</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def greet(): String =3D s&quot;Hello=
, I am
  $name&quot;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Define a =
class
  that mixes in the traits</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>class Dog(val
  name: String) extends Animal with Pet {</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>// Implement the abstract method</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>def sound(): String =3D &quot;Woof!&=
quot;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Instantia=
te the
  class and use the methods</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>val myDog =
=3D new
  Dog(&quot;Buddy&quot;)</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(myDo=
g.name)<span
  style=3D'mso-spacerun:yes'>     </span>// Output: Buddy</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(myDo=
g.greet())<span
  style=3D'mso-spacerun:yes'>  </span>// Output: Hello, I am Buddy</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(myDo=
g.sound())<span
  style=3D'mso-spacerun:yes'>  </span>// Output: Woof!</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(myDo=
g.sleep())<span
  style=3D'mso-spacerun:yes'>  </span>// Output: Zzz...</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.302in;
  height:4.4187in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:5.4722in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.302in;
  height:5.4722in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4006in;
  height:5.4722in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.7284in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.4791in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>2.
Difference between trait and sealed trait?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.1847=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
8:17
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.684in;margin-lef=
t:
 0in;width:12.7284in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:7.5763in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.4229in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.7284in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1.4993in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:7.5763in;height:3.1777in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>In Scala, bo=
th
  trait and sealed trait are used to define reusable code components, but t=
hey
  have some key differences related to how they can be extended and their u=
se
  cases.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Trait</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Definition: A
  trait is a fundamental unit of code reuse in Scala that can be mixed into
  classes to provide a certain behavior.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Extension: T=
raits
  can be extended by any class or object within the same compilation unit or
  outside it.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Use Case: Us=
ed for
  sharing common behavior across different classes.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Sealed Trait=
</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Definition: A
  sealed trait is a special type of trait that can only be extended by clas=
ses
  or objects within the same file.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Extension: S=
ealed
  traits restrict the inheritance to the same file where the trait is defin=
ed.
  This allows the compiler to know all the possible subtypes, which is usef=
ul
  for exhaustive pattern matching.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Use Case: Us=
ed
  when you want to restrict the possible implementations of a trait, ensuri=
ng
  that all implementations are known and controlled.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.4229in;
  height:1.4993in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.7284in;
  height:1.4993in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Interview An=
swer</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>A sealed tra=
it is
  a special type of trait that can only be extended by classes or objects
  within the same file. Sealed traits restrict the inheritance to the same =
file
  where the trait is defined. This allows the compiler to know all the poss=
ible
  subtypes, which is useful for exhaustive pattern matching.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Used when yo=
u want
  to restrict the possible implementations of a trait, ensuring that all
  implementations are known and controlled.</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1.6784in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.4229in;
  height:1.6784in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.7284in;
  height:1.6784in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:13.5222in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:3.7666in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>3. Wha=
t is
an abstract class? </p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.1847=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
8:26
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.684in;margin-lef=
t:
 .25in;width:13.2722in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:7.2569in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.7423in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2722in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D3 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:7.2569in;height:2.9909in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>An abstract =
class
  in Scala is a class that cannot be instantiated directly and is intended =
to
  be subclassed. Abstract classes can contain both abstract methods (methods
  without an implementation) and concrete methods (methods with an
  implementation). They are useful when you want to provide a common base c=
lass
  that outlines certain behaviors or properties that must be implemented by
  subclasses.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Key Points:<=
/p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Cannot Be
  Instantiated: Abstract classes cannot be instantiated on their own.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Abstract Mem=
bers:
  Can contain abstract members (methods and fields) that do not have an
  implementation.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Concrete Mem=
bers:
  Can also contain concrete members that provide a default implementation.<=
/p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Inheritance:
  Abstract classes are intended to be extended by subclasses that provide
  implementations for the abstract members.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>When to Use:=
</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Common Base =
Class:
  When you have a common base class that should not be instantiated on its =
own
  but should provide a template for its subclasses.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Partial
  Implementation: When you want to provide some default behavior while forc=
ing
  subclasses to implement specific methods.</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.7423in;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2722in;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1.1263in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.7423in;
  height:1.1263in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2722in;
  height:1.1263in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Interview An=
swer</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'> </span>Abstract class is subclass that canno=
t be
  instantiated directly and can contain both abstract methods and concrete
  methods.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1.6145in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.7423in;
  height:1.6145in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2722in;
  height:1.6145in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.2847in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.9215in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>4. Wha=
t is
the difference between<span style=3D'mso-spacerun:yes'>  </span>java inter=
face
and a scala trait?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.1847=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
8:41
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.434in;margin-lef=
t:
 .25in;width:12.0347in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:6.5895in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.6597in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.7847in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D3 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:6.5895in;height:7.2805in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Java interfa=
ces
  and Scala traits serve similar purposes in that they allow multiple
  inheritance of types and the reuse of code. However, they have some key
  differences in terms of functionality and flexibility.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Key Differen=
ces:</p>
  <ol type=3D1 style=3D'direction:ltr;unicode-bidi:embed;margin-top:0in;mar=
gin-bottom:
   0in;font-family:Calibri;font-size:11.0pt;font-weight:normal;font-style:n=
ormal'>
   <li value=3D1 style=3D'margin-top:0;margin-bottom:0;vertical-align:middl=
e'><span
       style=3D'font-family:Calibri;font-size:11.0pt;font-weight:normal;
       font-style:normal;font-family:Calibri;font-size:11.0pt'>Concrete
       Methods:</span></li>
  </ol>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Java
  Interface: Prior to Java 8, interfaces could only contain abstract methods
  (no implementations). Since Java 8, interfaces can have default methods (=
with
  implementations) and static methods.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Scala
  Trait: Traits can contain both abstract and concrete methods. This feature
  has always been part of Scala.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>&nbsp;</p>
  <ol type=3D1 style=3D'direction:ltr;unicode-bidi:embed;margin-top:0in;mar=
gin-bottom:
   0in;font-family:Calibri;font-size:11.0pt;font-weight:normal;font-style:n=
ormal'>
   <li value=3D2 style=3D'margin-top:0;margin-bottom:0;vertical-align:middl=
e'><span
       style=3D'font-family:Calibri;font-size:11.0pt;font-weight:normal;
       font-style:normal;font-family:Calibri;font-size:11.0pt'>Fields:</spa=
n></li>
  </ol>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Java
  Interface: Cannot contain fields (instance variables). Since Java 9,
  interfaces can have private fields, but they are not accessible to the
  implementing classes.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Scala
  Trait: Can contain fields (val or var). These fields can have concrete
  implementations, and they can be accessed directly by the classes that mi=
x in
  the trait.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>&nbsp;</p>
  <ol type=3D1 style=3D'direction:ltr;unicode-bidi:embed;margin-top:0in;mar=
gin-bottom:
   0in;font-family:Calibri;font-size:11.0pt;font-weight:normal;font-style:n=
ormal'>
   <li value=3D3 style=3D'margin-top:0;margin-bottom:0;vertical-align:middl=
e'><span
       style=3D'font-family:Calibri;font-size:11.0pt;font-weight:normal;
       font-style:normal;font-family:Calibri;font-size:11.0pt'>Constructor
       Parameters:</span></li>
  </ol>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Java
  Interface: Cannot have constructors or constructor parameters.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Scala
  Trait: Cannot have constructor parameters directly, but traits can have
  fields and initialization code. Scala 3 introduced trait parameters which
  allow traits to take parameters similar to class parameters.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>&nbsp;</p>
  <ol type=3D1 style=3D'direction:ltr;unicode-bidi:embed;margin-top:0in;mar=
gin-bottom:
   0in;font-family:Calibri;font-size:11.0pt;font-weight:normal;font-style:n=
ormal'>
   <li value=3D4 style=3D'margin-top:0;margin-bottom:0;vertical-align:middl=
e'><span
       style=3D'font-family:Calibri;font-size:11.0pt;font-weight:normal;
       font-style:normal;font-family:Calibri;font-size:11.0pt'>Inheritance:=
</span></li>
  </ol>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Java
  Interface: A class can implement multiple interfaces, and an interface can
  extend multiple other interfaces.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Scala
  Trait: A class can mix in multiple traits using the with keyword, and a t=
rait
  can extend multiple other traits.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>&nbsp;</p>
  <ol type=3D1 style=3D'direction:ltr;unicode-bidi:embed;margin-top:0in;mar=
gin-bottom:
   0in;font-family:Calibri;font-size:11.0pt;font-weight:normal;font-style:n=
ormal'>
   <li value=3D5 style=3D'margin-top:0;margin-bottom:0;vertical-align:middl=
e'><span
       style=3D'font-family:Calibri;font-size:11.0pt;font-weight:normal;
       font-style:normal;font-family:Calibri;font-size:11.0pt'>Usage:</span=
></li>
  </ol>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Java
  Interface: Primarily used for defining a contract that other classes must
  follow, without concern for implementation.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Scala
  Trait: Used for both defining contracts and providing reusable
  implementation.</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>&nbsp;</p>
  <ol type=3D1 style=3D'direction:ltr;unicode-bidi:embed;margin-top:0in;mar=
gin-bottom:
   0in;font-family:Calibri;font-size:11.0pt;font-weight:normal;font-style:n=
ormal'>
   <li value=3D6 style=3D'margin-top:0;margin-bottom:0;vertical-align:middl=
e'><span
       style=3D'font-family:Calibri;font-size:11.0pt;font-weight:normal;
       font-style:normal;font-family:Calibri;font-size:11.0pt'>Binary
       Compatibility:</span></li>
  </ol>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Java
  Interface: Adding methods to an interface can break binary compatibility
  (i.e., compiled classes might not work with the new interface without
  recompiling).</p>
  <p style=3D'margin:0in;margin-left:.375in;font-family:Calibri;font-size:1=
1.0pt'>Scala
  Trait: Designed to minimize issues with binary compatibility, though addi=
ng
  methods to a trait can still potentially cause issues.</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.6597in;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.7847in;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.9395in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.6597in;
  height:.9395in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.7847in;
  height:.9395in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Interview An=
swer</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Both Java
  interfaces and Scala traits provide mechanisms for multiple inheritance a=
nd
  code reuse, Scala traits are more flexible and powerful, allowing for
  concrete methods, fields, and better integration with the Scala type syst=
em.</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:6.0909in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.6597in;
  height:6.0909in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.7847in;
  height:6.0909in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.7361in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:3.1194in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>5. Wha=
t is a
singleton ?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.1847=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
8:55
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.684in;margin-lef=
t:
 0in;width:12.7361in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.7569in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.9923in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.9861in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.7534in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:5.7569in;height:2.4319in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>A singleton =
is a
  design pattern that restricts the instantiation of a class to exactly one
  instance. This single instance is globally accessible, ensuring that ther=
e is
  a single point of control for certain kinds of operations. The singleton
  pattern is commonly used when exactly one object is needed to coordinate
  actions across the system.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Key
  Characteristics:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Single Insta=
nce:
  Only one instance of the class is created.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Global Acces=
s: The
  single instance is globally accessible throughout the application.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Lazy
  Initialization: The instance is created only when it is needed, if not
  already created.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Usage:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Configuration
  Objects: Centralized configuration management.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Logging: A s=
ingle
  logging object that writes to a log file.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Resource
  Management: Managing access to a resource such as a database connection.<=
/p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.9923in;
  height:.7534in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.9861in;
  height:.7534in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Interview An=
swer</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>A singleton =
is
  type of a class that is used to instantiate exactly one instance and is
  globally accessible and it has single point of control for certain kinds =
of
  operations</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1.6784in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.9923in;
  height:1.6784in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.9861in;
  height:1.6784in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.4861in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:4.4222in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>6. Wha=
t is a
higher order function?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.1847=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
9:08
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.434in;margin-lef=
t:
 0in;width:12.4861in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.9111in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.0881in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4861in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.7534in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:5.9111in;height:4.4833in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>A higher-ord=
er
  function is a function that either takes one or more functions as argumen=
ts
  or returns a function as its result. Higher-order functions are a key fea=
ture
  in functional programming languages like Scala, allowing for greater
  flexibility and reusability of code.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Key
  Characteristics:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Function as
  Parameter: A higher-order function can accept other functions as input.</=
p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Function as =
Return
  Value: A higher-order function can return a function as its output.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Function
  Composition: They enable the composition of complex operations by combini=
ng
  simpler functions.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Define a
  higher-order function that returns a function</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>def
  multiplier(factor: Int): Int =3D&gt; Int =3D {</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>(x: Int) =3D&gt; x * factor</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Use the
  higher-order function to create a new function</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>val double =
=3D
  multiplier(2)</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>val tripple =
=3D
  multiplier(3)</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Use the
  returned functions</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(doub=
le(5))<span
  style=3D'mso-spacerun:yes'>  </span>// Output: 10</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(trip=
ple(5))
  // Output: 15</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.0881in;
  height:.7534in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4861in;
  height:.7534in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Interview An=
swer</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>A higher-ord=
er
  function is a function that either takes one or more functions as argumen=
ts
  or returns a function as its result.</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:3.7298in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.0881in;
  height:3.7298in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4861in;
  height:3.7298in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.5902in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:3.6437in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>7. Wha=
t is
closure function?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.1847=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
9:46
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.934in;margin-lef=
t:
 0in;width:12.5902in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.9722in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.527in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:6.0902in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:2.8555in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.9722in;
  height:2.8555in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>A closure is=
 a
  function that captures the environment in which it was created, allowing =
it
  to access variables that were in scope at the time of its creation, even =
if
  those variables are no longer in scope when the function is later execute=
d.
  Closures are a key feature of functional programming and provide a way to
  maintain state between function calls.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Key
  Characteristics:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Captures
  Environment: A closure &quot;closes over&quot; its surrounding environmen=
t,
  capturing the variables that it references.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Maintains St=
ate:
  Closures can maintain state between function calls by capturing and holdi=
ng
  onto variables.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Function with
  Context: They provide a way to associate some state with a function, enab=
ling
  more powerful abstractions.</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.527in;
  height:2.8555in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:6.0902in;height:3.5506in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Interview An=
swer</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>A closure in=
 Scala
  is a function that captures the environment in which it was created, allo=
wing
  it to access variables from that environment even after they go out of sc=
ope.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Define a
  function that returns a closure</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>def makeAdde=
r(x:
  Int): Int =3D&gt; Int =3D {</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'><span
  style=3D'mso-spacerun:yes'>  </span>(y: Int) =3D&gt; x + y<span
  style=3D'mso-spacerun:yes'>  </span>// The closure captures the variable=
 x</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>}</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Create an=
 adder
  function</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>val addFive =
=3D
  makeAdder(5)</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>// Use the c=
losure</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>println(addF=
ive(3))<span
  style=3D'mso-spacerun:yes'>  </span>// Output: 8 (because 5 + 3 =3D 8)</=
p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>In this exam=
ple,
  makeAdder creates a closure that captures x and can access it when called
  later with y.</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.6951in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.9722in;
  height:.6951in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.527in;
  height:.6951in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.4916in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:8.0in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>8. Wha=
t is a
companion object? What are the advantages ? example</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
10:08
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.434in;margin-lef=
t:
 0in;width:12.4916in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.3958in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.6034in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4916in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1.193in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:5.3958in;height:5.4666in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>A companion =
object
  in Scala is an object that is defined in the same file and with the same =
name
  as a class. It serves as a place to put methods and fields that are relat=
ed
  to the class but do not need to be part of individual instances. </p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>The companion
  object and the class can access each other's private members, providing a
  useful way to encapsulate both instance-level and class-level behavior.</=
p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Advantages of
  Companion Objects:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Factory Meth=
ods:
  Can be used to create factory methods for constructing instances of the
  class.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Encapsulatio=
n: Can
  access private members of the companion class, allowing for better
  encapsulation.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Namespace
  Management: Organizes related code in a single place, reducing the risk of
  namespace pollution.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Static Membe=
rs:
  Provides a way to define static members (methods and fields) that belong =
to
  the class itself rather than to any particular instance.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.6034in;
  height:1.193in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4916in;
  height:1.1937in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Companion ob=
jects
  provide a way to group class-level methods and fields together with
  instance-level methods and fields, enabling better organization,
  encapsulation, and access control in Scala programs. They are particularly
  useful for defining factory methods, constants, and other static-like mem=
bers
  related to a class.</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:4.2729in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.6034in;
  height:4.2729in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4916in;
  height:4.2729in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.8in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.8in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>9. Nil=
 vs
Null vs null vs Nothing vs None vs Unit </p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
10:21
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:0in;width:5.3013i=
n'>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Nil: Empty lis=
t.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Null: Type for
reference types, representing the absence of a value (not recommended).</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>null: Literal
representing no object (similar to Null).</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Nothing: Type =
for
values that never exist, often used for methods that throw exceptions.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>None: Represen=
ts the
absence of a value in Option.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Unit: Represen=
ts no
meaningful value, similar to void but a value in Scala.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:4.868in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:3.4972in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>10 .Wh=
at is
pure function?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
10:22
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:0in;width:4.868in=
'>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>A pure functio=
n is a
function that has two key properties:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Deterministic:=
 For a
given set of input values, it always produces the same output. The output is
solely dependent on the input arguments and not on any external state or
variables.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>No Side Effect=
s: It
does not alter any external state or perform any observable actions outside=
 its
scope. This means it does not modify global variables, perform I/O operatio=
ns,
or change the state of its arguments.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Advantages of =
Pure
Functions:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Easier to Test=
: Pure
functions are straightforward to test since they rely only on their input
values.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Predictable: S=
ince
their output is solely based on input, pure functions are easier to reason
about.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Reusability: P=
ure
functions can be safely reused in different contexts without unexpected side
effects.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Concurrency: P=
ure
functions are inherently thread-safe because they do not alter shared state=
.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.5138in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.3013in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>11. Wh=
at is
SBT and how have you used it?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
10:30
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:0in;width:7.5138i=
n'>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>SBT (Scala Bui=
ld
Tool) is an open-source build tool primarily used for Scala projects, but it
also supports Java and other JVM languages. It is designed to handle project
builds, dependency management, and automated testing, providing a powerful =
and
flexible build system.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Key Features o=
f SBT:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Incremental
Compilation: Only recompiles changed parts of the code, which speeds up the
build process.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Interactive Sh=
ell:
Provides an interactive command-line interface for executing build commands,
running tests, and more.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Dependency
Management: Uses Apache Ivy for dependency management, allowing you to easi=
ly
manage and resolve libraries.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Configuration =
with
Scala: Build definitions are written in Scala, enabling programmatic
configuration and customization.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Plugins: Suppo=
rts a
wide range of plugins to extend functionality, such as for code analysis,
packaging, and deployment.</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.2333in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:2.8937in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>12. Wh=
at is
currying?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
11:02
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:0in;width:5.2333i=
n'>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Currying is a
technique in functional programming where a function with multiple argument=
s is
transformed into a series of functions, each taking a single argument. In o=
ther
words, currying allows you to break down a function that takes multiple
arguments into a chain of functions that each take one argument.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Key Concepts:<=
/p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Transformation:
Currying transforms a function f(a, b) into a function f(a)(b).</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Partial Applic=
ation:
Allows you to partially apply arguments to a curried function, creating a n=
ew
function with fewer arguments.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>// Define a cu=
rried
function</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>def add(x: Int=
)(y:
Int): Int =3D x + y</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>// Use the cur=
ried
function</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>val add5 =3D
add(5)<span style=3D'mso-spacerun:yes'>   </span>// Partial application</=
p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>val result =3D
add5(10)<span style=3D'mso-spacerun:yes'>  </span>// Apply the remaining a=
rgument</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>println(result=
)<span
style=3D'mso-spacerun:yes'>  </span>// Output: 15</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.2597in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.2in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>13.
Difference between currying and higher-order functions</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
11:15
AM</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D3 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.684in;margin-lef=
t:
 .25in;width:12.0097in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.5625in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.1875in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2597in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td rowspan=3D3 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:5.5625in;height:2.9909in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Currying</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Definition:
  Currying is a technique where a function with multiple arguments is
  transformed into a series of functions that each take a single argument. =
It
  converts a function f(a, b) into a function f(a)(b).</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Purpose: All=
ows
  partial application of arguments, where you can create new functions by
  fixing some arguments while leaving others to be specified later.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Higher-Order
  Functions</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Definition: A
  higher-order function is a function that either takes one or more functio=
ns
  as arguments or returns a function as its result.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Purpose: Ena=
bles
  functions to be composed, reused, and combined in flexible ways. Higher-o=
rder
  functions are fundamental for functional programming as they allow
  manipulation of functions as first-class citizens.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.1875in;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2597in;
  height:.25in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.7534in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.1875in;
  height:.7534in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2597in;
  height:.7534in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:11.0pt'>Both concept=
s are
  powerful tools in functional programming, and they often complement each
  other. Currying allows for easier partial application and function chaini=
ng,
  while higher-order functions provide a way to handle and manipulate funct=
ions
  themselves.</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1.9875in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1.1875in;
  height:1.9875in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.2597in;
  height:1.9875in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.5in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:4.5611in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>14.
Difference between var and val?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
11:26
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.684in;margin-left:0in;width:7.5in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Use var for
variables that need to change during the execution of your program.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Use val for
variables that should remain constant after their initial assignment to
leverage immutability and improve code safety and clarity.</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.5in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:3.0631in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>15. Wh=
at is
case class?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.2548=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Monday,
July 29, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
11:50
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.684in;margin-left:.25in;width:7.25i=
n'>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>A case class in
Scala is a special type of class that comes with several built-in features =
and
benefits that make it particularly useful for functional programming and
pattern matching. Here are some key characteristics and features of case
classes:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Automatic Para=
meter
Promotion:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Case classes
automatically promote the parameters of the primary constructor to fields,
meaning you don't need to explicitly declare them as val.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Immutable:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>By default, the
fields in a case class are immutable (val). This makes case classes a good =
fit
for functional programming where immutability is preferred.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Structural Equ=
ality:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Case classes c=
ome
with a default implementation of equals and hashCode methods, which provide
structural equality. This means two instances of a case class are considered
equal if they have the same values for their fields.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Copy Method:</=
p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Case classes h=
ave a
built-in copy method that allows you to create a new instance of the case c=
lass
with some fields modified, while other fields remain unchanged.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Pattern Matchi=
ng:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Case classes a=
re
especially useful in pattern matching. The compiler automatically generates=
 an
extractor method (unapply) for case classes, allowing them to be used in
pattern matching expressions.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Readable toStr=
ing
Method:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Case classes
automatically generate a toString method that prints the name of the class =
and
its fields, which is helpful for debugging.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Serializable:<=
/p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Case classes
automatically extend the Serializable trait, which means they can be easily
serialized.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.6041in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.2993in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>16.&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Why/when
to use case class? Example</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.3812=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Wednesday,
July 31, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
6:58
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:.25in;width:7.354=
1in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Case classes in
Scala are used for several reasons, especially when you need concise, immut=
able
data structures with built-in support for pattern matching. Here are some k=
ey
scenarios and reasons for using case classes:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Why/When to Us=
e Case
Classes</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Immutable Data
Structures:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Case classes a=
re
immutable by default, which makes them a good choice for representing data =
that
should not change after creation. This immutability supports safer and more
predictable code, especially in concurrent or parallel programming.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Pattern Matchi=
ng:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Case classes c=
ome
with built-in support for pattern matching, making them ideal for scenarios
where you need to deconstruct data structures easily. This is particularly
useful in functional programming, where you often work with algebraic data
types.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Boilerplate
Reduction:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Case classes r=
educe
boilerplate code by automatically generating useful methods such as toStrin=
g,
equals, hashCode, and copy. This simplifies the creation and manipulation of
data objects.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Structural Equ=
ality:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>With case clas=
ses,
two instances with the same field values are considered equal. This structu=
ral
equality is useful for comparing data objects.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Readability and
Maintenance:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>The concise sy=
ntax
and automatic method generation make case classes more readable and easier =
to
maintain compared to regular classes.</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:12.4166in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:6.452in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>17.&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Difference
between case class and normal class?</p>

</div>

<table border=3D0 cellpadding=3D0 cellspacing=3D0 cols=3D7 valign=3Dtop sty=
le=3D'direction:
 ltr;border-collapse:collapse;border-width:0pt;margin-top:.0423in;margin-le=
ft:
 0in;width:12.4166in'>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:2.1312in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.0284in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4166in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:1px;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td colspan=3D2 rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;marg=
in:0in;
  padding:0pt;width:2.3812in;height:.177in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676=
'>Wednesday,
  July 31, 2024</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676=
'>7:01
  AM</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.0284in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4166in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.1104in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.0284in;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td rowspan=3D3 valign=3Dtop style=3D'vertical-align:top;margin:0in;paddi=
ng:0pt;
  width:5.4166in;height:4.7548in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Normal Class=
es</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Syntax and M=
anual
  Features:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Parameter
  Promotion: You need to explicitly define parameters as fields using val or
  var.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Default
  Implementations: Normal classes do not automatically generate toString,
  equals, hashCode, or copy methods. You need to override these methods
  manually if needed.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Pattern Matc=
hing:
  Normal classes do not support pattern matching out of the box. You need to
  implement custom extractors (unapply methods) if you want to use them in
  pattern matching.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Serializatio=
n:
  Normal classes do not extend Serializable by default.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Mutability:<=
/p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Fields can be
  either immutable (val) or mutable (var), depending on how you declare the=
m.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Boilerplate:=
</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Normal class=
es
  require more boilerplate code to achieve the same functionality provided
  automatically by case classes.</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.0659in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.684in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.684in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:2.1312in;
  height:.684in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.0284in;
  height:.684in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:.684in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.684in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.684in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:4.0041in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:4.0041in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td colspan=3D2 rowspan=3D3 valign=3Dtop style=3D'vertical-align:top;marg=
in:0in;
  padding:0pt;width:6.1604in;height:5.2291in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>The key
  differences between case classes and normal classes in Scala lie in their
  syntax, immutability, automatic method generation, and usability in patte=
rn
  matching. Here’s a detailed comparison:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Case Classes=
</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Syntax and
  Automatic Features:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Automatic
  Parameter Promotion: Parameters in the primary constructor are automatica=
lly
  promoted to val fields, making them immutable by default.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Default
  Implementations: Case classes automatically generate toString, equals,
  hashCode, and copy methods.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Pattern Matc=
hing:
  Case classes come with built-in support for pattern matching through the
  automatically generated unapply method.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Serializatio=
n:
  Case classes extend Serializable by default.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Immutability=
:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Fields in ca=
se
  classes are immutable by default (val). If you need mutable fields, you h=
ave
  to explicitly declare them as var.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Conciseness:=
</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Case classes
  reduce boilerplate code by providing automatic implementations of commonly
  used methods.</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:4.0041in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:4.0041in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:4.0041in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.4958in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.4958in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:.4958in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.4958in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:5.4166in;
  height:.4958in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.4958in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:.7284in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:.7284in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:.7284in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td colspan=3D3 rowspan=3D2 valign=3Dtop style=3D'vertical-align:top;marg=
in:0in;
  padding:0pt;width:5.9166in;height:2.8555in'>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Interview An=
swer:</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Boilerplate:=
 Case
  classes require less boilerplate code compared to normal classes.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Immutability=
: Case
  classes are immutable by default, while normal classes require explicit
  declarations to achieve immutability.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Pattern Matc=
hing:
  Case classes support pattern matching out of the box, whereas normal clas=
ses
  do not.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Automatic Me=
thods:
  Case classes automatically generate useful methods like toString, equals,
  hashCode, and copy. Normal classes require manual implementation of these
  methods.</p>
  <p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Use Cases: U=
se
  case classes when you need immutable data structures with built-in support
  for pattern matching and minimal boilerplate. Use normal classes when you
  need more control over the class implementation or when immutability and
  pattern matching are not primary concerns.</p>
  </td>
 </tr>
 <tr>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:1px;
  height:2.1256in;font-size:1pt'>
  <p style=3D'font-size:1pt'>&nbsp;</p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.25in;
  height:2.1256in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:2.1312in;
  height:2.1256in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:4.0284in;
  height:2.1256in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
  <td valign=3Dtop style=3D'vertical-align:top;margin:0in;padding:0pt;width=
:.0895in;
  height:2.1256in;font-size:1pt'>
  <p style=3D'font-size:1pt'></p>
  </td>
 </tr>
</table>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.0409in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:3.4013in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>18.&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Scala
type hierarchy?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.3812=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Wednesday,
July 31, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
7:05
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:.5in;width:6.5409=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Top of the Hie=
rarchy</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Any: The root =
of
Scala's type hierarchy. All types in Scala are subtypes of Any.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>AnyVal: The ro=
ot of
the value types, which represent concrete values.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>AnyRef: The ro=
ot of
reference types. In Java terms, this is similar to java.lang.Object.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Value Types (A=
nyVal)</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>AnyVal include=
s all
the primitive types in Scala, such as:</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Unit: A type t=
hat
has a single value, (), representing no value or no meaningful value (simil=
ar
to void in Java).</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Boolean: Repre=
sents
true or false.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Char: Represen=
ts a
16-bit Unicode character.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Int: Represent=
s a
32-bit signed integer.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Long: Represen=
ts a
64-bit signed integer.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Float: Represe=
nts a
32-bit IEEE 754 floating-point number.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Double: Repres=
ents a
64-bit IEEE 754 floating-point number.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Byte: Represen=
ts an
8-bit signed integer.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Short: Represe=
nts a
16-bit signed integer.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Reference Types
(AnyRef)</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>AnyRef is the =
base
class of all reference types. All user-defined classes, as well as other
reference types, inherit from AnyRef.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>String: A sequ=
ence
of characters.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>List, Option, =
Map,
Set: Standard collection types in Scala.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>User-defined
classes: All classes defined by the user extend AnyRef.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Special Types<=
/p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Nothing: The b=
ottom
type in the Scala type hierarchy. It is a subtype of every other type. It is
useful for functions that never return normally (e.g., they throw an
exception).</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Null: A subtyp=
e of
all reference types (i.e., subtypes of AnyRef) but not of value types (i.e.,
subtypes of AnyVal). The only instance of Null is the null reference.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:12.0pt'>Unit: As menti=
oned
before, it is a value type with only one value, (). It is used to indicate =
that
a method does not return a meaningful value.</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.6041in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:5.1513in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>19.&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;What
are partially applied functions?</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.3812=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Wednesday,
July 31, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
7:14
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:.25in;width:7.354=
1in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Partially appl=
ied
functions in Scala are functions that are not fully applied with all their
arguments. Instead, they are applied with some of their arguments, returnin=
g a
new function that takes the remaining arguments. This concept allows for mo=
re
flexible and modular function definitions.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Key Concepts</=
p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Function
Application: In Scala, you can create a function by applying only a subset =
of
its parameters.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Currying: Rela=
ted to
partially applied functions, currying transforms a function with multiple
arguments into a series of functions that each take a single argument.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Benefits</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Code Reusabili=
ty:
Allows you to reuse the same function with different fixed arguments.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Higher-Order
Functions: Useful in higher-order functions where you need to pass a functi=
on
with fewer arguments.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Function
Composition: Facilitates function composition by enabling more granular
function application.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

</div>

</div>

</div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'margin:0in'>&nbsp;</p>

<div style=3D'direction:ltr;border-width:100%'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:7.6041in'>

<div style=3D'direction:ltr;margin-top:0in;margin-left:0in;width:3.4652in'>

<p style=3D'margin:0in;font-family:"Calibri Light";font-size:20.0pt'>20.&nb=
sp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;What
is tail recursion.</p>

</div>

<div style=3D'direction:ltr;margin-top:.0423in;margin-left:0in;width:2.3812=
in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
Wednesday,
July 31, 2024</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:10.0pt;color:#767676'>=
7:24
AM</p>

</div>

<div style=3D'direction:ltr;margin-top:.434in;margin-left:.25in;width:7.354=
1in'>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Tail recursion=
 is a
specific form of recursion where the recursive call is the last operation in
the function. In tail-recursive functions, there is no need to keep track of
the previous state once a recursive call is made, allowing the compiler or
interpreter to optimize the recursion into a loop, thus preventing stack
overflow errors.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>&nbsp;</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Key Concepts</=
p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Last Operation=
: In
tail recursion, the recursive call is the last operation performed before
returning a result.</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Optimization:
Tail-recursive functions can be optimized by the compiler to reuse the curr=
ent
function’s stack frame for the next function call. This is known as tail =
call
optimization (TCO).</p>

<p style=3D'margin:0in;font-family:Calibri;font-size:14.0pt'>Stack Efficien=
cy:
Tail recursion prevents stack overflow and makes the function execution more
efficient in terms of memory usage.</p>

</div>

</div>

</div>

<div>

<p style=3D'margin:0in'>&nbsp;</p>

<p style=3D'text-align:left;margin:0in;font-family:Arial;font-size:9pt;
color:#969696;direction:ltr'>Created with OneNote.</p>

</div>

</body>

</html>
